// Generated by CoffeeScript 1.7.1
(function() {
  var SHORTHAND_TYPES, alwaysTrue, checkValidations, every, passesValidators, pfunk, r, registerType, _,
    __slice = [].slice;

  r = require('ramda');

  _ = require('lodash');

  every = r.all(r.identity);

  checkValidations = function(validations, value) {
    return every(validations.map(function(v) {
      return v(value);
    }));
  };

  alwaysTrue = function() {
    return true;
  };

  passesValidators = function(args, checks) {
    var i, passed, v, _fn, _i, _len;
    passed = true;
    _fn = function(i) {
      var checker_list;
      checker_list = checks[i];
      if (checker_list == null) {
        checker_list = [alwaysTrue];
      }
      return passed = passed && checkValidations(checker_list, v);
    };
    for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
      v = args[i];
      _fn(i);
    }
    return passed;
  };

  SHORTHAND_TYPES = {
    "String": _.isString,
    "Function": _.isFunction,
    "Object": _.isObject,
    "Array": _.isArray,
    "Number": _.isNumber,
    "*": alwaysTrue
  };

  pfunk = function(base_fn, base_checks) {
    var withSignature;
    if (base_checks == null) {
      base_checks = {};
    }
    withSignature = function() {
      var i, new_fn, new_registered_checks, v, validators, _fn, _i, _len;
      validators = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      new_registered_checks = _.cloneDeep(base_checks);
      _fn = function(v, i) {
        if (_.isString(v) && (SHORTHAND_TYPES[v] != null)) {
          v = SHORTHAND_TYPES[v];
        }
        if (new_registered_checks[i] != null) {
          return new_registered_checks[i].push(v);
        } else {
          return new_registered_checks[i] = [v];
        }
      };
      for (i = _i = 0, _len = validators.length; _i < _len; i = ++_i) {
        v = validators[i];
        _fn(v, i);
      }
      new_fn = r.arity(base_fn.length, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args.length > 0 && passesValidators(args, new_registered_checks)) {
          return base_fn.apply(null, args);
        } else {
          throw new Error("NOPE");
        }
      });
      return pfunk(new_fn, new_registered_checks);
    };
    base_fn.withSignature = withSignature;
    return base_fn;
  };

  registerType = function(type_name, fn) {
    return SHORTHAND_TYPES[type_name] = fn;
  };

  pfunk.registerType = registerType;

  module.exports = {
    pfunk: pfunk
  };

}).call(this);
